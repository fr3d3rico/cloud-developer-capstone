version: 2.1

commands:
  destroy-environment:
    description: Delete NEW_BACKEND deployed.
    parameters:
      workflow-id:
        type: string  
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Delete NEW_BACKEND backend
          when: on_fail
          command: |
            NEW_BACKEND=$(curl -H "token: b614fca1-86e7-4215-b1af-6fd45ce24223" --request GET https://api.memstash.io/values/NEW_BACKEND_${CIRCLE_WORKFLOW_ID:0:7})
            kubectl delete deployment,service backend-$NEW_BACKEND

orbs:
  kubernetes: circleci/kubernetes@0.12.0

jobs:

  install-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-install]
      - run:
          name: Back-end install
          command: |
             echo ${CIRCLE_WORKFLOW_ID:0:7}
             cd backend
             npm i
             curl https://raw.githubusercontent.com/fr3d3rico/cloud-developer-capstone/dev/apigateway.yml -o apigateway.yml
             cat apigateway.yml
      - save_cache:
          paths: [backend/node_modules]
          key: backend-install

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-install]
      - run:
          name: Scan Back-end
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-install]
      - run:
          name: Test Back-end
          command: |
            cd backend
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-install

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    
    steps:
      - checkout
      - kubernetes/install-kubectl

      - run:
          name: Get current backend deployment
          command: |
            aws eks --region us-east-1 update-kubeconfig --name udacity-fred-eks-cluster
            
            OLD_BACKEND=$(kubectl get deployment -o=jsonpath={.items[*].metadata.name})
            echo "OLD_BACKEND=$OLD_BACKEND"
            curl -H "Content-Type: text/plain" -H "token: b614fca1-86e7-4215-b1af-6fd45ce24223" --request PUT --data "$OLD_BACKEND" https://api.memstash.io/values/OLD_BACKEND_${CIRCLE_WORKFLOW_ID:0:7}
            
      - run:
          name: Write deployment.yml
          command: |
            echo "apiVersion: apps/v1" > deployment.yml
            echo "kind: Deployment" >> deployment.yml
            echo "metadata:" >> deployment.yml
            echo "  name: backend-${CIRCLE_WORKFLOW_ID:0:7} " >> deployment.yml
            echo "  labels:" >> deployment.yml
            echo "    app: backend-${CIRCLE_WORKFLOW_ID:0:7} " >> deployment.yml
            echo "spec:" >> deployment.yml
            echo "  replicas: 1" >> deployment.yml
            echo "  selector:" >> deployment.yml
            echo "    matchLabels:" >> deployment.yml
            echo "      app: backend-${CIRCLE_WORKFLOW_ID:0:7} " >> deployment.yml
            echo "  template:" >> deployment.yml
            echo "    metadata:" >> deployment.yml
            echo "      labels:" >> deployment.yml
            echo "        app: backend-${CIRCLE_WORKFLOW_ID:0:7} " >> deployment.yml
            echo "    spec:" >> deployment.yml
            echo "      containers:" >> deployment.yml
            echo "      - name: udacity-web-app" >> deployment.yml
            echo "        image: fr3d3rico/udacity-web-app" >> deployment.yml
            echo "        ports:" >> deployment.yml
            echo "        - containerPort: 3000" >> deployment.yml
            echo "        imagePullPolicy: Always" >> deployment.yml
            echo "        resources: #This resource is needed to avoid Scaling FailedGetResourceMetric error "  >> deployment.yml
            echo "          requests:" >> deployment.yml
            echo "            memory: '64Mi'" >> deployment.yml
            echo "            cpu: '250m'" >> deployment.yml
            echo "          limits:" >> deployment.yml
            echo "            memory: '1024Mi'" >> deployment.yml
            echo "            cpu: '500m'" >> deployment.yml
      
            cat deployment.yml
      - run:
          name: Write service.yml
          command: |
            echo "apiVersion: v1" > service.yml
            echo "kind: Service" >> service.yml
            echo "metadata:" >> service.yml
            echo " labels:" >> service.yml
            echo "   app: backend-${CIRCLE_WORKFLOW_ID:0:7} " >> service.yml
            echo " name: backend-${CIRCLE_WORKFLOW_ID:0:7}" >> service.yml
            echo "spec:" >> service.yml
            echo " ports:" >> service.yml
            echo " - name: '3000'" >> service.yml
            echo "   port: 3000" >> service.yml
            echo "   targetPort: 3000" >> service.yml
            echo " selector:" >> service.yml
            echo "   app: backend-${CIRCLE_WORKFLOW_ID:0:7}" >> service.yml
            echo " type: LoadBalancer " >> service.yml
      
            cat service.yml

      - run:
          name: Deploy new backend
          command: |
            kubectl apply -f deployment.yml
            kubectl apply -f service.yml
      
      - destroy-environment

  wait-some-minutes:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Wait 7 minute
          command: |
            sleep 7m
      - destroy-environment
          
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout

      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip curl nodejs npm
            pip install awscli
      
      - kubernetes/install-kubectl

      - run:
          name: Backend smoke test.
          command: |
            aws eks --region us-east-1 update-kubeconfig --name udacity-fred-eks-cluster
            
            URL=$(kubectl get service --sort-by=.metadata.creationTimestamp -o=jsonpath={.items[2].status.loadBalancer.ingress[0].hostname} | head -1)
            
            URL="http://${URL}:3000"

            if curl -s ${URL} | grep "Hello World!"
            then
              return 0
            else
              return 1
            fi

      - run:
          name: Download and Update apigateway.yml
          command: |
             aws eks --region us-east-1 update-kubeconfig --name udacity-fred-eks-cluster
             
             URL=$(kubectl get service --sort-by=.metadata.creationTimestamp -o=jsonpath={.items[2].status.loadBalancer.ingress[0].hostname} | head -1)

             curl https://raw.githubusercontent.com/fr3d3rico/cloud-developer-capstone/dev/apigateway.yml -o apigateway.yml

             sed -i 's/NEW_BACKEND/$URL/' apigateway.yml

             aws apigatewayv2 reimport-api --body file://apigateway.yml --api-id 2f3e0nx5j3

      - destroy-environment

  cleanup:
      docker:
        - image: python:3.7-alpine3.11
      steps:
        - checkout

        - run:
            name: Install dependencies
            command: |
              apk add --update tar gzip curl nodejs npm
              pip install awscli
        
        - kubernetes/install-kubectl

        - run:
            name: Delete OLD_BACKEND backend
            command: |
              aws eks --region us-east-1 update-kubeconfig --name udacity-fred-eks-cluster

              OLD_BACKEND=$(curl -H "token: b614fca1-86e7-4215-b1af-6fd45ce24223" --request GET https://api.memstash.io/values/OLD_BACKEND_${CIRCLE_WORKFLOW_ID:0:7})
              
              kubectl delete deployment,service $OLD_BACKEND

        - destroy-environment

workflows:
  default:
    jobs:
      - install-backend
      - scan-backend:
          requires: [install-backend]
      - test-backend:
          requires: [scan-backend]
      - deploy-infrastructure:
          requires: [test-backend]
          filters:
            branches:
              only: [main]
      - wait-some-minutes:
          requires: [deploy-infrastructure]
      - smoke-test:
          requires: [wait-some-minutes]
      - cleanup:
          requires: [smoke-test]